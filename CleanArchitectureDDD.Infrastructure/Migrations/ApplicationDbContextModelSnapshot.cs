// <auto-generated />
using System;
using CleanArchitectureDDD.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CleanArchitectureDDD.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitectureDDD.Domain.Entities.Permissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ReadUser"
                        },
                        new
                        {
                            Id = 2,
                            Name = "WriteUser"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UpdateUser"
                        });
                });

            modelBuilder.Entity("CleanArchitectureDDD.Domain.Entities.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Client"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("CleanArchitectureDDD.Domain.Entities.Roles.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 3
                        });
                });

            modelBuilder.Entity("CleanArchitectureDDD.Domain.Rentals.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateCancellation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_cancellation");

                    b.Property<DateTime?>("DateConfirmation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_confirmation");

                    b.Property<DateTime?>("DateCopletation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_copletation");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateRejection")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_rejection");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_rents");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_rents_user_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_rents_vehicle_id");

                    b.ToTable("rents", (string)null);
                });

            modelBuilder.Entity("CleanArchitectureDDD.Domain.Reviews.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<Guid?>("RentalId")
                        .HasColumnType("uuid")
                        .HasColumnName("rental_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("RentalId")
                        .HasDatabaseName("ix_reviews_rental_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_reviews_vehicle_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("CleanArchitectureDDD.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CleanArchitectureDDD.Domain.Users.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("CleanArchitectureDDD.Domain.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int[]>("Accessories")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("accessories");

                    b.Property<DateTime?>("LastRent")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_rent");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("model");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Vin")
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("vin");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("CleanArchitectureDDD.Domain.Entities.Roles.RolePermission", b =>
                {
                    b.HasOne("CleanArchitectureDDD.Domain.Entities.Permissions.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("CleanArchitectureDDD.Domain.Entities.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");
                });

            modelBuilder.Entity("CleanArchitectureDDD.Domain.Rentals.Rental", b =>
                {
                    b.HasOne("CleanArchitectureDDD.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_rents_users_user_id");

                    b.HasOne("CleanArchitectureDDD.Domain.Vehicles.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("fk_rents_vehicles_vehicle_id");

                    b.OwnsOne("CleanArchitectureDDD.Domain.Rentals.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("RentalId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("EndDate")
                                .HasColumnType("date")
                                .HasColumnName("duration_end_date");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("date")
                                .HasColumnName("duration_start_date");

                            b1.HasKey("RentalId");

                            b1.ToTable("rents");

                            b1.WithOwner()
                                .HasForeignKey("RentalId")
                                .HasConstraintName("fk_rents_rents_id");
                        });

                    b.OwnsOne("CleanArchitectureDDD.Domain.Shared.Currency", "AccessoriesPrice", b1 =>
                        {
                            b1.Property<Guid>("RentalId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("accessories_price_currency_type");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("accessories_price_price");

                            b1.HasKey("RentalId");

                            b1.ToTable("rents");

                            b1.WithOwner()
                                .HasForeignKey("RentalId")
                                .HasConstraintName("fk_rents_rents_id");
                        });

                    b.OwnsOne("CleanArchitectureDDD.Domain.Shared.Currency", "Maintenance", b1 =>
                        {
                            b1.Property<Guid>("RentalId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("maintenance_currency_type");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("maintenance_price");

                            b1.HasKey("RentalId");

                            b1.ToTable("rents");

                            b1.WithOwner()
                                .HasForeignKey("RentalId")
                                .HasConstraintName("fk_rents_rents_id");
                        });

                    b.OwnsOne("CleanArchitectureDDD.Domain.Shared.Currency", "Price", b1 =>
                        {
                            b1.Property<Guid>("RentalId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("price_currency_type");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("price_price");

                            b1.HasKey("RentalId");

                            b1.ToTable("rents");

                            b1.WithOwner()
                                .HasForeignKey("RentalId")
                                .HasConstraintName("fk_rents_rents_id");
                        });

                    b.OwnsOne("CleanArchitectureDDD.Domain.Shared.Currency", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("RentalId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("total_price_currency_type");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("total_price_price");

                            b1.HasKey("RentalId");

                            b1.ToTable("rents");

                            b1.WithOwner()
                                .HasForeignKey("RentalId")
                                .HasConstraintName("fk_rents_rents_id");
                        });

                    b.Navigation("AccessoriesPrice");

                    b.Navigation("Duration");

                    b.Navigation("Maintenance");

                    b.Navigation("Price");

                    b.Navigation("TotalPrice");
                });

            modelBuilder.Entity("CleanArchitectureDDD.Domain.Reviews.Review", b =>
                {
                    b.HasOne("CleanArchitectureDDD.Domain.Rentals.Rental", null)
                        .WithMany()
                        .HasForeignKey("RentalId")
                        .HasConstraintName("fk_reviews_rents_rental_id");

                    b.HasOne("CleanArchitectureDDD.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_reviews_users_user_id");

                    b.HasOne("CleanArchitectureDDD.Domain.Vehicles.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("fk_reviews_vehicles_vehicle_id");
                });

            modelBuilder.Entity("CleanArchitectureDDD.Domain.Users.UserRole", b =>
                {
                    b.HasOne("CleanArchitectureDDD.Domain.Entities.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_roles_role_id");

                    b.HasOne("CleanArchitectureDDD.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_users_user_id");
                });

            modelBuilder.Entity("CleanArchitectureDDD.Domain.Vehicles.Vehicle", b =>
                {
                    b.OwnsOne("CleanArchitectureDDD.Domain.Vehicles.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_zip_code");

                            b1.HasKey("VehicleId");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId")
                                .HasConstraintName("fk_vehicles_vehicles_id");
                        });

                    b.OwnsOne("CleanArchitectureDDD.Domain.Shared.Currency", "Maintenance", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("maintenance_currency_type");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("maintenance_price");

                            b1.HasKey("VehicleId");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId")
                                .HasConstraintName("fk_vehicles_vehicles_id");
                        });

                    b.OwnsOne("CleanArchitectureDDD.Domain.Shared.Currency", "Price", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("price_currency_type");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("price_price");

                            b1.HasKey("VehicleId");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId")
                                .HasConstraintName("fk_vehicles_vehicles_id");
                        });

                    b.Navigation("Address");

                    b.Navigation("Maintenance");

                    b.Navigation("Price");
                });
#pragma warning restore 612, 618
        }
    }
}
